// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using essaiVide.Data;

#nullable disable

namespace essaiVide.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double>("Solde")
                        .HasColumnType("double precision");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Application.Models.Colis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommandeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId")
                        .IsUnique();

                    b.ToTable("Colis");
                });

            modelBuilder.Entity("Application.Models.Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Datde")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EtatCommande")
                        .HasColumnType("integer");

                    b.Property<int>("EtatSolde")
                        .HasColumnType("integer");

                    b.Property<int?>("FactureId")
                        .HasColumnType("integer");

                    b.Property<int?>("LivraisonId")
                        .HasColumnType("integer");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<int?>("PaiementId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FactureId")
                        .IsUnique();

                    b.HasIndex("LivraisonId")
                        .IsUnique();

                    b.HasIndex("PaiementId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("Application.Models.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facture");
                });

            modelBuilder.Entity("Application.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommandeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProduitId")
                        .HasColumnType("integer");

                    b.Property<int>("QteCommande")
                        .HasColumnType("integer");

                    b.Property<double>("Somme")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LigneCommande");
                });

            modelBuilder.Entity("Application.Models.Livraison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LivreurId");

                    b.ToTable("Livraison");
                });

            modelBuilder.Entity("Application.Models.Livreur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Livreur");
                });

            modelBuilder.Entity("Application.Models.Paiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("Application.Models.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Prix")
                        .HasColumnType("double precision");

                    b.Property<int>("QteSeuil")
                        .HasColumnType("integer");

                    b.Property<int>("QteStock")
                        .HasColumnType("integer");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Produit");
                });

            modelBuilder.Entity("Application.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NomRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Application.Models.Versement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Versements");
                });

            modelBuilder.Entity("Application.Models.Client", b =>
                {
                    b.HasOne("Application.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Application.Models.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Models.Colis", b =>
                {
                    b.HasOne("Application.Models.Commande", "Commande")
                        .WithOne("Colis")
                        .HasForeignKey("Application.Models.Colis", "CommandeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("Application.Models.Commande", b =>
                {
                    b.HasOne("Application.Models.Client", null)
                        .WithMany("Commandes")
                        .HasForeignKey("ClientId");

                    b.HasOne("Application.Models.Facture", "Facture")
                        .WithOne()
                        .HasForeignKey("Application.Models.Commande", "FactureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.Livraison", "Livraison")
                        .WithOne()
                        .HasForeignKey("Application.Models.Commande", "LivraisonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.Paiement", "Paiement")
                        .WithOne()
                        .HasForeignKey("Application.Models.Commande", "PaiementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.User", null)
                        .WithMany("Commandes")
                        .HasForeignKey("UserId");

                    b.Navigation("Facture");

                    b.Navigation("Livraison");

                    b.Navigation("Paiement");
                });

            modelBuilder.Entity("Application.Models.LigneCommande", b =>
                {
                    b.HasOne("Application.Models.Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.Produit", "Produit")
                        .WithMany("Lignes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Application.Models.Livraison", b =>
                {
                    b.HasOne("Application.Models.Livreur", "Livreur")
                        .WithMany()
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Application.Models.Produit", b =>
                {
                    b.HasOne("Application.Models.User", null)
                        .WithMany("Produits")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Application.Models.User", b =>
                {
                    b.HasOne("Application.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Application.Models.Versement", b =>
                {
                    b.HasOne("Application.Models.Client", "Client")
                        .WithMany("Versements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Application.Models.Client", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Versements");
                });

            modelBuilder.Entity("Application.Models.Commande", b =>
                {
                    b.Navigation("Colis")
                        .IsRequired();

                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Application.Models.Produit", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Application.Models.User", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Produits");
                });
#pragma warning restore 612, 618
        }
    }
}
